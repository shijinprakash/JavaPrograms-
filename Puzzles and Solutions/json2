import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.*;

public class JsonFlattenerProgram {

    private static final ObjectMapper mapper = new ObjectMapper();

    public static void main(String[] args) throws Exception {
        // Step 1: Load JSON string
        String json = "{\"organization\":{\"name\":\"TechCorp Global\",\"established_year\":1998,\"departments\":[{\"dept_id\":\"D001\",\"name\":\"Research & Development\",\"head\":\"Ella Vance\",\"employees\":[{\"emp_id\":\"E101\",\"full_name\":\"Alice Johnson\",\"role\":\"Lead Developer\",\"contact\":{\"email\":\"alice.j@techcorp.com\",\"phone\":\"555-123-4567\"},\"skills\":[\"Java\",\"Python\",\"Cloud Computing\"],\"performance_reviews\":[{\"date\":\"2024-03-15\",\"score\":92,\"notes\":\"Excellent performance on Project A.\"},{\"date\":\"2025-03-15\",\"score\":95,\"notes\":\"Led team effectively on Project B.\"}]}],\"active_projects\":[{\"project_id\":\"P501\",\"project_name\":\"Quantum AI Initiative\",\"team_lead_id\":\"E101\",\"status\":\"In Progress\"}]},{\"dept_id\":\"D002\",\"name\":\"Marketing\",\"head\":\"Mark Chen\",\"employees\":[{\"emp_id\":\"E201\",\"full_name\":\"Sarah Davis\",\"role\":\"Marketing Manager\",\"contact\":{\"email\":\"sarah.d@techcorp.com\",\"phone\":\"555-444-5555\"},\"skills\":[\"SEO\",\"Content Strategy\"],\"performance_reviews\":[{\"date\":\"2025-02-10\",\"score\":88,\"notes\":\"Successful social media campaign launch.\"}]}],\"active_projects\":[]}],\"projects\":[{\"project_id\":\"P501\",\"project_name\":\"Quantum AI Initiative\",\"budget_usd\":5000000,\"team_members\":[\"E101\",\"E102\"],\"milestones\":\"[{\\\"id\\\":\\\"M1\\\",\\\"name\\\":\\\"Phase 1 Complete\\\"},{\\\"id\\\":\\\"M2\\\",\\\"name\\\":\\\"Algorithm Test\\\"}]\"},{\"project_id\":\"P502\",\"project_name\":\"Global Market Expansion\",\"budget_usd\":1200000,\"team_members\":[\"E201\"],\"milestones\":\"[{\\\"id\\\":\\\"M1\\\",\\\"name\\\":\\\"Market Research\\\"},{\\\"id\\\":\\\"M2\\\",\\\"name\\\":\\\"Campaign Launch\\\"}]\"}]}}";

        JsonNode root = mapper.readTree(json);

        // Step 2: Define ignoreFields (full path style)
        Map<String, List<String>> ignoreFields = new HashMap<>();
        ignoreFields.put("employees/performance_reviews", List.of("notes"));

        // Step 3: Define uniqueKeys with array names only
        Map<String, List<String>> uniqueKeys = new HashMap<>();
        uniqueKeys.put("departments", List.of("dept_id"));
        uniqueKeys.put("employees", List.of("emp_id"));
        uniqueKeys.put("performance_reviews", List.of("date"));
        uniqueKeys.put("active_projects", List.of("project_id"));
        uniqueKeys.put("projects", List.of("project_id"));

        // Step 4: Flatten
        Map<String, Object> flattened = new LinkedHashMap<>();
        flattenJson("", root, flattened, ignoreFields, uniqueKeys);

        // Step 5: Print result
        flattened.forEach((k, v) -> System.out.println(k + " = " + v));
    }

    public static void flattenJson(String currentPath, JsonNode node,
                                   Map<String, Object> result,
                                   Map<String, List<String>> ignoreFields,
                                   Map<String, List<String>> uniqueKeys) {

        if (node == null || node.isNull()) {
            result.put(currentPath, null);
            return;
        }

        // Normalized path for ignoreFields
        String normalizedParent = normalizePath(currentPath, "/");

        if (node.isObject()) {
            List<String> fieldsToIgnore = ignoreFields.getOrDefault(normalizedParent, Collections.emptyList());

            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> field = fields.next();
                String fieldName = field.getKey();
                if (fieldsToIgnore.contains(fieldName)) {
                    continue;
                }

                String newPath = currentPath.isEmpty() ? fieldName : currentPath + "/" + fieldName;
                flattenJson(newPath, field.getValue(), result, ignoreFields, uniqueKeys);
            }

        } else if (node.isArray()) {
            String arrayName = getLastPathSegment(normalizedParent);
            List<String> keyFields = uniqueKeys.get(arrayName);

            for (int i = 0; i < node.size(); i++) {
                JsonNode item = node.get(i);
                String identifier;

                if (keyFields != null) {
                    List<String> keyValues = new ArrayList<>();
                    for (String keyField : keyFields) {
                        JsonNode keyNode = getValueAtPath(item, keyField);
                        String keyVal = (keyNode != null && !keyNode.isNull()) ? keyNode.asText() : "null";
                        keyValues.add(keyField + ":" + keyVal);
                    }
                    identifier = "[" + String.join(",", keyValues) + "]";
                } else {
                    identifier = "[" + i + "]";
                }

                String newPath = currentPath + identifier;
                flattenJson(newPath, item, result, ignoreFields, uniqueKeys);
            }

        } else {
            result.put(currentPath, node.asText());
        }
    }

    private static String normalizePath(String path, String separator) {
        return path.replaceAll("\\[[^\\]]*\\]", "").replace(".", separator);
    }

    private static JsonNode getValueAtPath(JsonNode node, String path) {
        String[] parts = path.split("/");
        JsonNode current = node;
        for (String part : parts) {
            if (current != null && current.has(part)) {
                current = current.get(part);
            } else {
                return null;
            }
        }
        return current;
    }

    private static String getLastPathSegment(String path) {
        if (path == null || path.isEmpty()) return "";
        String[] parts = path.split("/");
        return parts[parts.length - 1].replaceAll("\\[.*\\]", "");
    }
}
